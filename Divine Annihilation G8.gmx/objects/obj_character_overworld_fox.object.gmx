<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_character_overworld_fox_idle_side</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_system_parent_entity</parentName>
  <maskName>spr_system_mask_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Player

//==========================//
// Inherit Events
//==========================//
event_inherited();


//==========================//
// Movement
//==========================//
noclipSpeed = 16;       // The amount of pixels the player will jump when nocliping
maxXVelocity = 3.25;       // Velocity x max
maxYVelocity = 3.25;       // Velocity y max
walkAcceleration = .25; // Acceleration
walkFriction = 1.8;     // Friction
canMove = true;         // Allow the player to move varialbe (default is true)


//==========================//
// Squash and Stretch
//==========================//
xScale = 1.5; // Stored xscale (used in draw event)
yScale = 1.5; // Stored yscale (used in draw event)


//==========================//
// Animation
//==========================//
stateIdle = 10;
stateRun = 11;
animationState = stateIdle;  // Set animation state to idle
facingDirection = 0;    // Direction the player is facing
facing = image_xscale;  // Set facing to images xscale
move = 0;               // ?


//==========================//
// Out of battle
//==========================//
destroyDefeatedEnemies = false; // Destroy nearby enemies when leaving a battle to avoid being sent back into battle
destroyRange = 64;              // Range in pixles to destroy enemies when leaving a battle


//==========================//
// Inventory
//==========================//
inventoryOpen = false;          // Inventory menu open varaiable


//==========================//
// Unsorted (try to not use these)
//==========================//
//trigbox1 = 1;                   // ?
//slot1 = 0;                      // ?
//global.com_channel = 0;         // Communication channel for text triggers [needs reworking]
//paralax1 = false;               // Paralaxing the first layer
//ATTACK = 12;
//DEFEND = 13;
//attackRate = .05; // Nu
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Re-enable player movement

//==========================//
// Allow the player to move again
//==========================//
canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop/Resume players movement (and stop sprinting)

//==========================//
// Movement
//==========================//
if canMove == false
{
    animationState = stateIdle; // Stop the walk cycle
    maxXVelocity = 0; // Set max x veleocity to 0
    maxyVelocity = 0; // Set max y veleocity to 0
    vx = 0; // Set x veleocity to 0
    vy = 0; // Set y veleocity to 0
    stop = 1; // ?
}
if canMove == true
{
    maxXVelocity = 3.25; // Set max x veleocity to 2
    maxYVelocity = 3.25; // Set max y veleocity to 2
    stop = 0; // ?
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy defeated enemies

//==========================//
// Look for nearby objects that are children of enemies
//==========================//
if destroyDefeatedEnemies == true
{
    if distance_to_object(obj_system_parent_enemy) &lt;= destroyRange
    {
        with instance_nearest(x, y, obj_system_parent_enemy)
        {
            instance_destroy();
        }
        destroyDefeatedEnemies = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls and movemnt

//==========================//
// Movement
//==========================//
if canMove == true
{


//--------------------------//
// Sprinting
//--------------------------//
if global.keySprint
{
    maxXVelocity = 4.25; // Set max x veleocity to 2
    maxYVelocity = 4.25; // Set max y veleocity to 2
}


//--------------------------//
// Left
//--------------------------//
if(global.keyLeft &amp;&amp; !global.keyRight)
{
    move = 1
    facing = -1;
    animationState = stateRun;
    if (vx &gt; 0)
    {
        vx = approach(vx, 0, walkFriction);
    }
    vx = approach(vx,-maxXVelocity,walkAcceleration);
    
    if(!global.keyUp &amp;&amp; !global.keyDown)
    {
        if (vy != 0)
        {
            vy = approach(vy, 0, walkFriction);
        }
    }
    facingDirection = 2;
}


//--------------------------//
// Right
//--------------------------//
if(global.keyRight &amp;&amp; !global.keyLeft)
{
    move = 1
    facing = 1;
    animationState = stateRun;
    if (vx &lt; 0)
    {
        vx = approach(vx, 0, walkFriction);
    }
    vx = approach(vx, maxXVelocity, walkAcceleration);
    
    if(!global.keyUp &amp;&amp; !global.keyDown)
    {
        if (vy != 0)
        {
            vy = approach(vy, 0, walkFriction);
        }
    }
    facingDirection = 2;
}


//--------------------------//
// Up
//--------------------------//
if(global.keyUp &amp;&amp; !global.keyDown)
{
    move = 1
    animationState = stateRun;    
    if (vy &gt; 0)
    {
        vy = approach(vy, 0, walkFriction);
    }
    vy = approach(vy, -maxYVelocity, walkAcceleration);
    
    if(!global.keyLeft &amp;&amp; !global.keyRight)
    {
        if (vx != 0)
        {
            vx = approach(vx, 0, walkFriction);
        }
    }
    if((vy*vx) == 0)
    {
        facingDirection = 1;
    }
    else
    {
        facingDirection = 2;
    }
}


//--------------------------//
// Down
//--------------------------//
if(global.keyDown &amp;&amp; !global.keyUp)
{
    move = 1
    animationState = stateRun;
    if (vy &lt; 0)
    {
        vy = approach(vy, 0, walkFriction);
    }
    vy = approach(vy, maxYVelocity, walkAcceleration);
    
    if(!global.keyLeft &amp;&amp; !global.keyRight)
    {
        if (vx != 0)
        {
            vx = approach(vx, 0, walkFriction);
        }
    }
    if((vy*vx) == 0)
    {
        facingDirection = 0;
    }
    else
    {
        facingDirection = 2;
    }
}
}


//==========================//
// Stopping Friction
//==========================//
if(!global.keyLeft &amp;&amp; !global.keyRight &amp;&amp; !global.keyUp &amp;&amp; !global.keyDown)
{
    move = 0;
    animationState = stateIdle;
    vx = approach(vx, 0, walkFriction);
    vy = approach(vy, 0, walkFriction);
}


//==========================//
// Menus
//==========================//
if global.keySelect &amp;&amp; !inventoryOpen &amp;&amp; canMove
{
    inventoryOpen = true;
    instance_create(x, y, obj_menu_inventory);
}


//==========================//
// Nocliping
//==========================//
if global.noclipEnabled == true
{


//--------------------------//
// Noclip up
//--------------------------//
    if global.keyUp
    {
        y -= noclipSpeed;
    }


//--------------------------//
// Noclip down
//--------------------------//
    if global.keyDown
    {
        y += noclipSpeed;
    }


//--------------------------//
// Noclip left
//--------------------------//
    if global.keyLeft
    {
        x -= noclipSpeed;
    }


//--------------------------//
// Noclip right
//--------------------------//
    if global.keyRight
    {
        x += noclipSpeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Sprite Directions and Animation

//==========================//
// Define sprite for standing directions
//==========================//
switch(animationState)
{
    case stateIdle:
        image_speed = .07;
        switch(facingDirection)
        {
        case 0:
            sprite_index = spr_character_overworld_fox_idle_front;
        break;
        
        case 1:
            sprite_index = spr_character_overworld_fox_idle_back;
        break;
        
        case 2:
            sprite_index = spr_character_overworld_fox_idle_side;
        break;
        }
        draw_sprite_ext(spr_system_other_entityShadow, 1, x, y+2, 1, 1, 0, c_white, 0.5);
    break;


//==========================//
// Define sprite for walking directions
//==========================//
    case stateRun:
        if(vx != 0)
        {
        image_speed = abs(vx)/30;
        }
        else
        {
        image_speed = abs(vy)/35;
        }
        switch(facingDirection)
        {
        case 0:
            sprite_index = spr_character_overworld_fox_walk_front;
        break;
        
        case 1:
            sprite_index = spr_character_overworld_fox_walk_back;
        break;
        
        case 2:
            sprite_index = spr_character_overworld_fox_walk_side;
        break;
        }
        draw_sprite_ext(spr_system_other_entityShadow, image_index, x, y+2, 1, 1, 0, c_white, 0.5);
    break;
}


//==========================//
// Draw Player
//==========================//
draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yScale) * 0.25, facing * xScale, yScale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,64</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
