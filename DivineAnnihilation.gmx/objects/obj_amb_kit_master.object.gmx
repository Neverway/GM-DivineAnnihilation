<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_custom_master</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TOOL SETTINGS
/*
If you want to use this light system within levels
that take place during diferetn times of day (for example day, night and evening)
you can place this code in creation code if the instance in the game maker level
editor (right click on the object in the room editor)
*/

global.light_dev_mode = false;   // enable this when you are editing lights, disable when done
global.global_light = 1;        // set the overall darkness of the level (day, night etc)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// side vars

surface_black = surface_create(view_wview[0],view_hview[0]);

// this makes sure only one light is being edited
global.light_dev_edit = false;

// ds grid for a signle save/load system instead of individual settings
light_grid = ds_grid_create(17,0);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// re-model the lights from string

/*
ds_grid_read(light_grid, "STRING HERE");


for(xx=0; xx &lt; ds_grid_height(light_grid); xx++){
    created_light = instance_create(x, y, obj_amb_kit_light);
    
    created_light.type = ds_grid_get(light_grid, 0, xx);
    created_light.x = ds_grid_get(light_grid, 1, xx);
    created_light.y = ds_grid_get(light_grid, 2, xx);
    created_light.x_scale = ds_grid_get(light_grid, 3, xx);
    created_light.y_scale = ds_grid_get(light_grid, 4, xx);
    created_light.angle = ds_grid_get(light_grid, 5, xx);
    created_light.hue = ds_grid_get(light_grid, 6, xx);
    created_light.saturation = ds_grid_get(light_grid, 7, xx);
    created_light.value = ds_grid_get(light_grid, 8, xx);
    created_light.light = ds_grid_get(light_grid, 9, xx);
    created_light.ambience = ds_grid_get(light_grid, 10, xx);
    created_light.light_shadow = ds_grid_get(light_grid, 11, xx);
    created_light.ambience_shadow = ds_grid_get(light_grid, 12, xx);
    
    created_light.sh_count = ds_grid_get(light_grid, 13, xx);
    created_light.ms_count = ds_grid_get(light_grid, 14, xx);
    
    with (created_light){
        ds_list_read(shadows, ds_grid_get(other.light_grid, 15, other.xx));
        ds_list_read(masks, ds_grid_get(other.light_grid, 16, other.xx));
    }
}
*/
// #################################################################
/*
show_debug_message( "ds_grid_read(light_grid, '" + ds_grid_write(light_grid) + "');" );
show_debug_message( "" );
show_debug_message( "" );
show_debug_message( "for(xx=0; xx &lt; ds_grid_height(light_grid); xx++){" );
show_debug_message( "created_light = instance_create(x, y, obj_amb_kit_light);" );
show_debug_message( "" );
show_debug_message( "created_light.type = ds_grid_get(light_grid, 0, xx);" );
show_debug_message( "created_light.x = ds_grid_get(light_grid, 1, xx);" );
show_debug_message( "created_light.y = ds_grid_get(light_grid, 2, xx);" );
show_debug_message( "created_light.x_scale = ds_grid_get(light_grid, 3, xx);" );
show_debug_message( "created_light.y_scale = ds_grid_get(light_grid, 4, xx);" );
show_debug_message( "created_light.angle = ds_grid_get(light_grid, 5, xx);" );
show_debug_message( "created_light.hue = ds_grid_get(light_grid, 6, xx);" );
show_debug_message( "created_light.saturation = ds_grid_get(light_grid, 7, xx);" );
show_debug_message( "created_light.value = ds_grid_get(light_grid, 8, xx);" );
show_debug_message( "created_light.light = ds_grid_get(light_grid, 9, xx);" );
show_debug_message( "created_light.ambience = ds_grid_get(light_grid, 10, xx);" );
show_debug_message( "created_light.light_shadow = ds_grid_get(light_grid, 11, xx);" );
show_debug_message( "created_light.ambience_shadow = ds_grid_get(light_grid, 12, xx);" );
show_debug_message( "" );
show_debug_message( "created_light.sh_count = ds_grid_get(light_grid, 13, xx);" );
show_debug_message( "created_light.ms_count = ds_grid_get(light_grid, 14, xx);" );
show_debug_message( "with (created_light){" );
show_debug_message( "ds_list_read(shadows, ds_grid_get(other.light_grid, 15, other.xx));" );
show_debug_message( "ds_list_read(masks, ds_grid_get(other.light_grid, 16, other.xx));" );
show_debug_message( "}" );
show_debug_message( "}" );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEAR FROM MEMORY

/*
destroy the surfaces and data structures to prevent memory leaks
*/

if (surface_exists(surface_black)){
    surface_free(surface_black);
}

if (ds_exists(light_grid, ds_type_grid)){
    ds_grid_destroy(light_grid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// creating lights

if (global.light_dev_mode == true &amp;&amp; global.light_dev_edit == false){
    if (keyboard_check_pressed(vk_insert)){
        instance_create(mouse_x, mouse_y, obj_amb_kit_light);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// saving all lights to one single string

if (global.light_dev_mode = true){
    if (keyboard_check_pressed(vk_home)){
        
        //ds_grid_destroy(light_grid);
        //light_grid = ds_grid_create(17, 0);
        
        if (instance_exists(obj_amb_kit_light)){
            for (xx = 0; xx &lt; instance_number(obj_amb_kit_light); xx++){
                light = instance_find(obj_amb_kit_light, xx);
                
                ds_grid_resize(light_grid, 17, ds_grid_height(light_grid)+1);
                
                ds_grid_set(light_grid, 0, xx, light.type);
                ds_grid_set(light_grid, 1, xx, light.x);
                ds_grid_set(light_grid, 2, xx, light.y);
                ds_grid_set(light_grid, 3, xx, light.x_scale);
                ds_grid_set(light_grid, 4, xx, light.y_scale);
                ds_grid_set(light_grid, 5, xx, light.angle);
                ds_grid_set(light_grid, 6, xx, light.hue);
                ds_grid_set(light_grid, 7, xx, light.saturation);
                ds_grid_set(light_grid, 8, xx, light.value);
                ds_grid_set(light_grid, 9, xx, light.light);
                ds_grid_set(light_grid, 10, xx, light.ambience);
                ds_grid_set(light_grid, 11, xx, light.light_shadow);
                ds_grid_set(light_grid, 12, xx, light.ambience_shadow);
                ds_grid_set(light_grid, 13, xx, light.sh_count);
                ds_grid_set(light_grid, 14, xx, light.ms_count);
                
                ds_grid_set(light_grid, 15, xx, ds_list_write(light.shadows));
                ds_grid_set(light_grid, 16, xx, ds_list_write(light.masks));

            }
            
            
            //show_debug_message( ds_grid_write(light_grid) );
show_debug_message( "// #########################################################" );
show_debug_message( "// #########################################################" );
show_debug_message( "" );
show_debug_message( "" );
show_debug_message( "" );
show_debug_message( "ds_grid_read(light_grid, '" + ds_grid_write(light_grid) + "');" );
show_debug_message( "" );
show_debug_message( "" );
show_debug_message( "for(xx=0; xx &lt; ds_grid_height(light_grid); xx++){" );
show_debug_message( "created_light = instance_create(x, y, obj_amb_kit_light);" );
show_debug_message( "" );
show_debug_message( "created_light.type = ds_grid_get(light_grid, 0, xx);" );
show_debug_message( "created_light.x = ds_grid_get(light_grid, 1, xx);" );
show_debug_message( "created_light.y = ds_grid_get(light_grid, 2, xx);" );
show_debug_message( "created_light.x_scale = ds_grid_get(light_grid, 3, xx);" );
show_debug_message( "created_light.y_scale = ds_grid_get(light_grid, 4, xx);" );
show_debug_message( "created_light.angle = ds_grid_get(light_grid, 5, xx);" );
show_debug_message( "created_light.hue = ds_grid_get(light_grid, 6, xx);" );
show_debug_message( "created_light.saturation = ds_grid_get(light_grid, 7, xx);" );
show_debug_message( "created_light.value = ds_grid_get(light_grid, 8, xx);" );
show_debug_message( "created_light.light = ds_grid_get(light_grid, 9, xx);" );
show_debug_message( "created_light.ambience = ds_grid_get(light_grid, 10, xx);" );
show_debug_message( "created_light.light_shadow = ds_grid_get(light_grid, 11, xx);" );
show_debug_message( "created_light.ambience_shadow = ds_grid_get(light_grid, 12, xx);" );
show_debug_message( "" );
show_debug_message( "created_light.sh_count = ds_grid_get(light_grid, 13, xx);" );
show_debug_message( "created_light.ms_count = ds_grid_get(light_grid, 14, xx);" );
show_debug_message( "with (created_light){" );
show_debug_message( "ds_list_read(shadows, string(ds_grid_get(other.light_grid, 15, other.xx)));" );
show_debug_message( "ds_list_read(masks, string(ds_grid_get(other.light_grid, 16, other.xx)));" );
show_debug_message( "}" );
show_debug_message( "}" );
show_debug_message( "" );
show_debug_message( "" );
show_debug_message( "" );
show_debug_message( "// #########################################################" );
show_debug_message( "// #########################################################" );
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEAR FROM MEMORY

/*
destroy the surfaces and data structures to prevent memory leaks
*/

if (surface_exists(surface_black)){
    surface_free(surface_black);
}

if (ds_exists(light_grid, ds_type_grid)){
    ds_grid_destroy(light_grid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEAR FROM MEMORY

/*
destroy the surfaces and data structures to prevent memory leaks
*/

if (surface_exists(surface_black)){
    surface_free(surface_black);
}

if (ds_exists(light_grid, ds_type_grid)){
    ds_grid_destroy(light_grid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw darkness

if (!surface_exists(surface_black)){surface_black = surface_create(view_wview[0],view_hview[0]);}

surface_set_target(surface_black);
draw_clear_alpha(c_black, global.global_light);
//draw_clear_alpha(c_black, 0);


    // light for punching
    with(obj_player){
        draw_set_blend_mode(bm_src_color);
        draw_sprite_ext(spr_custom_lights_light,0,x-view_xview[0],y-view_yview[0],0.5,0.5,0,c_white,0.2);
        draw_set_blend_mode(bm_normal);        
    }

with (obj_amb_kit_light){

    if (!surface_exists(surface_light)){surface_light = surface_create(view_xview[0], view_hview[0])}
    // punch lighting
    draw_set_blend_mode(bm_src_color);
    draw_surface_ext(surface_light, view_xview[0]-view_xview[0], view_yview[0]-view_yview[0], 1, 1, 0, c_white , 1);
    draw_set_blend_mode(bm_normal);
}

surface_reset_target();

draw_surface(surface_black,view_xview[0], view_yview[0]);

// ambience for blending
with (obj_amb_kit_light){
    if (!surface_exists(surface_ambience)){surface_ambience = surface_create(view_xview[0], view_hview[0])}
    draw_set_blend_mode(bm_add);
    draw_surface_ext(surface_ambience, view_xview[0], view_yview[0], 1, 1, 0, c_white , 1);
    draw_set_blend_mode(bm_normal);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
