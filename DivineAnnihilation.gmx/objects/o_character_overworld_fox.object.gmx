<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_character_overworld_fox_idle_side</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>p_entity</parentName>
  <maskName>s_character_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Player

//==========================//
// Inherit Events
//==========================//
event_inherited();


//==========================//
// Movement
//==========================//
vxMax = 2;              // Velocity x max
vyMax = 2;              // Velocity y max
walkAcceleration = .25; // Acceleration
walkFriction = 1.8;     // Friction
canMove = true;         // Allow the player to move varialbe (default is true)
move = 0;               // ?  
noclipSpeed = 16;       // The amount of pixels the player will jump when nocliping


//==========================//
// Squash and Stretch
//==========================//
xscale = 1.5; // Stored xscale (used in draw event)
yscale = 1.5; // Stored yscale (used in draw event)


//==========================//
// States (Not used in my code, but here to keep script from breaking)
//==========================//
IDLE = 10;
RUN = 11;
ATTACK = 12;
DEFEND = 13;
attackRate = .05; // Nu


//==========================//
// Initialize Extra Properties
//==========================//
animationState = IDLE;  // Set animation state to idle
facingDirection = 0;    // Direction the player is facing
facing = image_xscale;  // Set facing to images xscale


//==========================//
// Unsorted
//==========================//
trigbox1 = 1;                   // ?
slot1 = 0;                      // ?
global.com_channel = 0;         // Communication channel for text triggers [needs reworking]
destroyDefeatedEnemies = false; // Destroy nearby enemies when leaving a battle to avoid being sent back into battle
inventoryOpen = false;          // Inventory menu open varaiable
paralax1 = false;               // Paralaxing the first layer
destroyRange = 64


//==========================//
// Create needed instances
//==========================//
instance_create(x, y, o_system_exit); // Invisible object that quits the game when the quit key is held
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Globalize players coordinates
o_character_overworld_fox.x = global.savedx;
o_character_overworld_fox.y = global.savedy;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset communication channel

global.com_channel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Re-enable movement

canMove = true; // Allow the player to move again
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy defeated enemies

//==========================//
// List of enemies to destory
//==========================//
if destroyDefeatedEnemies == true
{


//--------------------------//
// Roamer
//--------------------------//
    if distance_to_object(o_character_overworld_roamer) &lt;= destroyRange
    {
        with instance_nearest(x, y, o_character_overworld_roamer)
        {
            instance_destroy();
        }
        destroyDefeatedEnemies = false;
    }
    
    
//--------------------------//
// Artine Viney
//--------------------------//
    if distance_to_object(o_character_overworld_viney) &lt;= destroyRange
    {
        with instance_nearest(x, y, o_character_overworld_viney)
        {
            instance_destroy();
        }
        destroyDefeatedEnemies = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop/Resume players movement

//==========================//
// Movement
//==========================//
if canMove == false
{
    animationState = IDLE; // Stop the walk cycle
    vxMax = 0; // Set max x veleocity to 0
    vyMax = 0; // Set max y veleocity to 0
    vx = 0; // Set x veleocity to 0
    vy = 0; // Set y veleocity to 0
    stop = 1; // ?
}
if canMove == true
{
    vxMax = 2; // Set max x veleocity to 2
    vyMax = 2; // Set max y veleocity to 2
    stop = 0; // ?
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls and movemnt

//==========================//
// Create Variables
//==========================//
var kUp, kDown, kLeft, kRight, kSelect, kBack, kMenu;


//==========================//
// Define Controls
//==========================//
kUp = keyboard_check(vk_up);
kDown = keyboard_check(vk_down);
kLeft = keyboard_check(vk_left);
kRight = keyboard_check(vk_right);
kSelect = keyboard_check_pressed(ord("X"));
kSprint = keyboard_check(ord("X"));
kBack = keyboard_check_pressed(ord("Z"));
kMenu = keyboard_check_pressed(ord("C"));


//==========================//
// Movement
//==========================//
if canMove == true
{


//--------------------------//
// Sprinting
//--------------------------//
if(kSprint)
{
    vxMax = 3.25; // Set max x veleocity to 2
    vyMax = 3.25; // Set max y veleocity to 2
}


//--------------------------//
// Left
//--------------------------//
if(kLeft &amp;&amp; !kRight)
{
    move = 1
    facing = -1;
    animationState = RUN;
    if (vx &gt; 0)
    {
        vx = approach(vx, 0, walkFriction);
    }
    vx = approach(vx,-vxMax,walkAcceleration);
    
    if(!kUp &amp;&amp; !kDown)
    {
        if (vy != 0)
        {
            vy = approach(vy, 0, walkFriction);
        }
    }
    facingDirection = 2;
}


//--------------------------//
// Right
//--------------------------//
if(kRight &amp;&amp; !kLeft)
{
    move = 1
    facing = 1;
    animationState = RUN;
    if (vx &lt; 0)
    {
        vx = approach(vx, 0, walkFriction);
    }
    vx = approach(vx, vxMax, walkAcceleration);
    
    if(!kUp &amp;&amp; !kDown)
    {
        if (vy != 0)
        {
            vy = approach(vy, 0, walkFriction);
        }
    }
    facingDirection = 2;
}


//--------------------------//
// Up
//--------------------------//
if(kUp &amp;&amp; !kDown)
{
    move = 1
    animationState = RUN;    
    if (vy &gt; 0)
    {
        vy = approach(vy, 0, walkFriction);
    }
    vy = approach(vy, -vyMax, walkAcceleration);
    
    if(!kLeft &amp;&amp; !kRight)
    {
        if (vx != 0)
        {
            vx = approach(vx, 0, walkFriction);
        }
    }
    if((vy*vx) == 0)
    {
        facingDirection = 1;
    }
    else
    {
        facingDirection = 2;
    }
}


//--------------------------//
// Down
//--------------------------//
if(kDown &amp;&amp; !kUp)
{
    move = 1
    animationState = RUN;
    if (vy &lt; 0)
    {
        vy = approach(vy, 0, walkFriction);
    }
    vy = approach(vy, vyMax, walkAcceleration);
    
    if(!kLeft &amp;&amp; !kRight)
    {
        if (vx != 0)
        {
            vx = approach(vx, 0, walkFriction);
        }
    }
    if((vy*vx) == 0)
    {
        facingDirection = 0;
    }
    else
    {
        facingDirection = 2;
    }
}
}


//==========================//
// Stopping Friction
//==========================//
if(!kLeft &amp;&amp; !kRight &amp;&amp; !kUp &amp;&amp; !kDown)
{
    move = 0;
    animationState = IDLE;
    vx = approach(vx, 0, walkFriction);
    vy = approach(vy, 0, walkFriction);
}


//==========================//
// Menus
//==========================//
if kMenu &amp;&amp; inventoryOpen = false &amp;&amp; canMove = true
{
    inventoryOpen = true;
    instance_create(x, y, o_menu_inventory_items);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Developer nocliping

//==========================//
// Create Variables
//==========================//
var noclipUp, noclipDown, noclipLeft, noclipRight


//==========================//
// Define Controls
//==========================//
noclipUp = keyboard_check(ord("W"));
noclipDown = keyboard_check(ord("S"));
noclipLeft = keyboard_check(ord("A"));
noclipRight = keyboard_check(ord("D"));


//==========================//
// Nocliping
//==========================//
if global.noclipEnabled == true
{


//--------------------------//
// Noclip up
//--------------------------//
if noclipUp
{
    y -= noclipSpeed;
}


//--------------------------//
// Noclip down
//--------------------------//
if noclipDown
{
    y += noclipSpeed;
}


//--------------------------//
// Noclip left
//--------------------------//
if noclipLeft
{
    x -= noclipSpeed;
}


//--------------------------//
// Noclip right
//--------------------------//
if noclipRight
{
    x += noclipSpeed;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Paralaxing

if paralax1 == true
{
    background_x[1] = view_xview / 3;
    background_x[4] = view_xview / 3;
    background_x[2] = view_xview / 2.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Squash and Stretch

//==========================//
// X and Y scales
//==========================//
xscale = approach(xscale, 1, .05);
yscale = approach(yscale, 1, .05);


//==========================//
// While character runs
//==========================//
if(animationState == RUN)
{
    if(animation_hit_frame(0) || animation_hit_frame(2))
    {
        yscale = 0.80;
        xscale = 1.20;
    }
    if(p_chance(.1))
    {
        var _vx = vx;
        var mydepth = depth;
        with(instance_create(other.x, other.y+7, o_dust))
        {
            depth = mydepth;
            vx = _vx * 0.25;
            vy = random_range(-0.75, 0.25);
          }
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Sprite Directions and Animation

//==========================//
// Define sprite for standing directions
//==========================//
switch(animationState)
{
    case IDLE:
        image_speed = .07;
        switch(facingDirection)
        {
        case 0:
            sprite_index = s_character_overworld_fox_idle_front;
        break;
        
        case 1:
            sprite_index = s_character_overworld_fox_idle_back;
        break;
        
        case 2:
            sprite_index = s_character_overworld_fox_idle_side;
        break;
        }
        draw_sprite_ext(s_shadow, 1, x, y+2, 1, 1, 0, c_white, 0.5);
    break;


//==========================//
// Define sprite for walking directions
//==========================//
    case RUN:
        if(vx != 0)
        {
        image_speed = abs(vx)/25;
        }
        else
        {
        image_speed = abs(vy)/30;
        }
        switch(facingDirection)
        {
        case 0:
            sprite_index = s_character_overworld_fox_walk_front;
        break;
        
        case 1:
            sprite_index = s_character_overworld_fox_walk_back;
        break;
        
        case 2:
            sprite_index = s_character_overworld_fox_walk_side;
        break;
        }
        draw_sprite_ext(s_shadow, image_index, x, y+2, 1, 1, 0, c_white, 0.5);
    break;
}


//==========================//
// Draw Player
//==========================//
draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>17,70</point>
    <point>35,35</point>
  </PhysicsShapePoints>
</object>
