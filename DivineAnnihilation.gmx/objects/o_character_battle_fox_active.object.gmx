<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_character_battle_fox_slash</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>p_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Entity

//==========================//
//Inherit Events
//==========================//
event_inherited();


//==========================//
// Squash and Stretch
//==========================//
image_xscale = 1.5;
image_yscale = 1.5;
image_speed = 0;
image_index = 0;

//==========================//
// Variables
//==========================//
pos = 2
active = 1
lx = 216
rx = 416
cx = 320
movement = "lane"

//==========================//
// Battle stuff
//==========================//


//==========================//
// Battle stats
//==========================//
// Player health is 100
atk = random_range(0,25);
def = random_range(0,5);
hp = 25;
hold = 100
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Player

//==========================//
//Inherit Events
//==========================//
event_inherited();

//==========================//
// Movement
//==========================//
vxMax = 4; // ?
vyMax = 4; // ?
accel = .75; // Acceleration
fric = 1.8; // Friction
canmove = 1; // Allow the player to move varialbe (default is 1)
move = 0; // ?

//==========================//
// Squash and Stretch
//==========================//
xscale = 2.5; // Stored xscale (used in draw event)
yscale = 2.5; // Stored yscale (used in draw event)

//==========================//
// States (Not used in my code, but here to keep script from breaking)
//==========================//
IDLE = 10;
RUN = 11;
ATTACK = 12;
DEFEND = 13;
attackRate = .05; // Nu

//==========================//
// Initialize Extra Properties
//==========================//
state = IDLE // Set animation state to idle
dir = 0; // Direction the player is facing
facing = image_xscale; // Set facing to images xscale


//==========================//
// Unsorted
//==========================//
image_speed = 0
image_index = 0
attack = 0

//==========================//
// Create needed instances
//==========================//






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls and movemnt

//==========================//
// Create Variables
//==========================//
var kUp, kDown, kLeft, kRight, kSelect, kBack, kMenu;


//==========================//
// Define Controls
//==========================//
kUp = keyboard_check(vk_up);
kDown = keyboard_check(vk_down);
kLeft = keyboard_check(vk_left);
kRight = keyboard_check(vk_right);
kSelect = keyboard_check_pressed(ord("X"));
kSprint = keyboard_check(ord("X"));
kBack = keyboard_check_pressed(ord("Z"));
kMenu = keyboard_check_pressed(ord("C"));


//==========================//
// Movement
//==========================//



//--------------------------//
// Sprinting
//--------------------------//
if(kSprint)
{
    vxMax = 4; // Set max x veleocity to 2
    vyMax = 4; // Set max y veleocity to 2
}
//--------------------------//
// Left
//--------------------------//
if(kLeft &amp;&amp; !kRight)
{
    move = 1
    //facing = -1;
    state = RUN;
    if (vx &gt; 0) {
        vx = approach(vx,0,fric);
    }
    vx = approach(vx,-vxMax,accel);
    if(!kUp &amp;&amp; !kDown) {
        if (vy != 0) {
            vy = approach(vy,0,fric);
        }
    }
    
    dir = 2;
}

//--------------------------//
// Right
//--------------------------//
if(kRight &amp;&amp; !kLeft)
{
    move = 1
    //facing = 1;
    state = RUN;
    if (vx &lt; 0) {
        vx = approach(vx,0,fric);
    }
    vx = approach(vx,vxMax,accel);
    if(!kUp &amp;&amp; !kDown) {
        if (vy != 0) {
            vy = approach(vy,0,fric);
        }
    }
    
    dir = 2;
}

//--------------------------//
// Up
//--------------------------//
if(kUp &amp;&amp; !kDown)
{
    move = 1
    state = RUN;
    if (vy &gt; 0) {
        vy = approach(vy,0,fric);
    }
    vy = approach(vy,-vyMax,accel);
    
    if(!kLeft &amp;&amp; !kRight) {
        if (vx != 0) {
            vx = approach(vx,0,fric);
        }
    }
    if((vy*vx) == 0) {
        dir = 1;
        } else {
        dir = 2;
        }
}

//--------------------------//
// Down
//--------------------------//
if(kDown &amp;&amp; !kUp)
{
    move = 1
    state = RUN;
    if (vy &lt; 0) {
        vy = approach(vy,0,fric);
    }
    vy = approach(vy,vyMax,accel);
    
    if(!kLeft &amp;&amp; !kRight) {
        if (vx != 0) {
            vx = approach(vx,0,fric);
        }
    }
    if((vy*vx) == 0) {
        dir = 0;
        } else {
        dir = 2;
        }
}


//==========================//
// Friction
//==========================//
if(!kLeft &amp;&amp; !kRight &amp;&amp; !kUp &amp;&amp; !kDown)
{
    move = 0
    state = IDLE;
    vx = approach(vx,0,fric);
    vy = approach(vy,0,fric);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if active = 1
{

// Visible when active
visible = 1;
o_character_battle_fox2.visible = 0;

// Crosshair
    if keyboard_check_pressed(ord("X"))
    {
        if !instance_exists(o_battle_attack_crosshair)
        {
            instance_create(x,y-96,o_battle_attack_crosshair);
            movement = "crosshair";
        }
    }
    if keyboard_check_released(ord("X"))
    {
        if instance_exists(o_battle_attack_crosshair)
        {
            with o_battle_attack_crosshair
            {
                instance_destroy();
            }
            movement = "lane";
        }
    }

// Lane movement
    if movement = "lane"
    {
        if keyboard_check_pressed(vk_left)
        {
            if x = cx
            {
                x = lx
            }
            if x = rx
            {
                x = cx
            }
        }
        if keyboard_check_pressed(vk_right)
        {
            if x = cx
            {
                x = rx
            }
            if x = lx
            {
                x = cx
            }
        }
    }
}
if active = 0
{
    visible = 0
    o_character_battle_fox.visible = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0
image_index = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Sprite Directions and Animation

//==========================//
// Define sprite for standing directions
//==========================//
switch(state) {
    case IDLE:
        image_speed = image_speed;
        switch(dir) {
        case 0:
            sprite_index = sprite_index;
        break;
        
        case 1:
            sprite_index = sprite_index;
        break;
        
        case 2:
            sprite_index = sprite_index;
        break;
        }
        draw_sprite_ext(s_shadow, 1, x,y+2,1,1,0,c_white,0.5);
    break;

//==========================//
// Define sprite for walking directions
//==========================//
    case RUN:
        if(vx != 0) {
        image_speed = image_speed;
        } else {
        image_speed = image_speed;
        }
        switch(dir) {
        case 0:
            sprite_index = sprite_index;
        break;
        
        case 1:
            sprite_index = sprite_index;
        break;
        
        case 2:
            sprite_index = sprite_index;
        break;
        }
        draw_sprite_ext(s_shadow, image_index, x,y+2,1,1,0,c_white,0.5);
    break;
}

//==========================//
// Draw Player
//==========================//
draw_sprite_ext(s_shadow, 1, x,y+2,2.5,2.5,0,c_white,0.75);
draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, image_xscale, image_yscale, 0, c_white, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(o_battle_attack_slash)
{
    instance_create(x,y,o_battle_attack_slash);
    instance_create(x,y,o_battle_attack_sword_hitbox);
    o_character_battle_fox_active.sprite_index = s_character_battle_fox_slash
    o_character_battle_fox_active.image_speed = .5
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
